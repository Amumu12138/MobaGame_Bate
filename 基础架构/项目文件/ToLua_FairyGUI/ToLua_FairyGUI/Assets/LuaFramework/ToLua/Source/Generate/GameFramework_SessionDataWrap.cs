//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameFramework_SessionDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameFramework.SessionData), typeof(System.Object));
		L.RegFunction("Init", Init);
		L.RegFunction("InitMsg", InitMsg);
		L.RegFunction("Clear", Clear);
		L.RegFunction("New", _CreateGameFramework_SessionData);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("NORMAL", 0);
		L.RegVar("EMPTY", get_EMPTY, null);
		L.RegVar("errCode", get_errCode, set_errCode);
		L.RegVar("SendingData", get_SendingData, set_SendingData);
		L.RegVar("ReceiveData", get_ReceiveData, set_ReceiveData);
		L.RegVar("Size", get_Size, null);
		L.RegVar("ServiceID", get_ServiceID, null);
		L.RegVar("CallbackID", get_CallbackID, null);
		L.RegVar("RequestData", get_RequestData, null);
		L.RegVar("LuaSendingData", get_LuaSendingData, null);
		L.RegVar("LuaReceiveData", get_LuaReceiveData, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameFramework_SessionData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameFramework.SessionData obj = new GameFramework.SessionData();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameFramework.SessionData.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			GameFramework.SessionData obj = (GameFramework.SessionData)ToLua.CheckObject<GameFramework.SessionData>(L, 1);
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			object arg2 = ToLua.ToVarObject(L, 4);
			obj.Init(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitMsg(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameFramework.SessionData obj = (GameFramework.SessionData)ToLua.CheckObject<GameFramework.SessionData>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			uint arg1 = (uint)LuaDLL.luaL_checknumber(L, 3);
			obj.InitMsg(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)ToLua.CheckObject<GameFramework.SessionData>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EMPTY(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GameFramework.SessionData.EMPTY);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_errCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			uint ret = obj.errCode;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index errCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SendingData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			byte[] ret = obj.SendingData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendingData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReceiveData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			byte[] ret = obj.ReceiveData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReceiveData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			uint ret = obj.Size;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServiceID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			uint ret = obj.ServiceID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ServiceID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CallbackID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			uint ret = obj.CallbackID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CallbackID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RequestData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			object ret = obj.RequestData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RequestData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LuaSendingData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			GameFramework.ByteBuffer ret = obj.LuaSendingData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LuaSendingData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LuaReceiveData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			GameFramework.ByteBuffer ret = obj.LuaReceiveData;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LuaReceiveData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_errCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.errCode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index errCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SendingData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.SendingData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendingData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReceiveData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SessionData obj = (GameFramework.SessionData)o;
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.ReceiveData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReceiveData on a nil value");
		}
	}
}

