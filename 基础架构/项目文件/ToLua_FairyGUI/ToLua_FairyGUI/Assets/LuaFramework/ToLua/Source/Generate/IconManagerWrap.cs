//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class IconManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(IconManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("LoadIcon", LoadIcon);
		L.RegFunction("UnloadIcon", UnloadIcon);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("MAX_POOL_SIZE", 10);
		L.RegConstant("POOL_CHECK_TIME", 30);
		L.RegVar("mInst", get_mInst, set_mInst);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadIcon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			IconManager obj = (IconManager)ToLua.CheckObject<IconManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			LoadCompleteCallback arg1 = (LoadCompleteCallback)ToLua.CheckDelegate<LoadCompleteCallback>(L, 3);
			LoadErrorCallback arg2 = (LoadErrorCallback)ToLua.CheckDelegate<LoadErrorCallback>(L, 4);
			obj.LoadIcon(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadIcon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			IconManager obj = (IconManager)ToLua.CheckObject<IconManager>(L, 1);
			obj.UnloadIcon();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mInst(IntPtr L)
	{
		try
		{
			ToLua.Push(L, IconManager.mInst);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mInst(IntPtr L)
	{
		try
		{
			IconManager arg0 = (IconManager)ToLua.CheckObject<IconManager>(L, 2);
			IconManager.mInst = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

