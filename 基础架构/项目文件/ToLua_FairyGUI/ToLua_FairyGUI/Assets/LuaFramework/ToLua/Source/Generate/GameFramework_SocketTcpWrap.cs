//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameFramework_SocketTcpWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameFramework.SocketTcp), typeof(System.Object));
		L.RegFunction("SetAddress", SetAddress);
		L.RegFunction("Connect", Connect);
		L.RegFunction("ClearCachedData", ClearCachedData);
		L.RegFunction("ReSendCachedData", ReSendCachedData);
		L.RegFunction("Send", Send);
		L.RegFunction("Loop", Loop);
		L.RegFunction("IsConnected", IsConnected);
		L.RegFunction("ReConnect", ReConnect);
		L.RegFunction("CloseAndInitTcp", CloseAndInitTcp);
		L.RegFunction("Clear", Clear);
		L.RegFunction("New", _CreateGameFramework_SocketTcp);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Port", get_Port, null);
		L.RegVar("Host", get_Host, null);
		L.RegVar("ServerType", get_ServerType, null);
		L.RegVar("ErrorMessage", get_ErrorMessage, null);
		L.RegVar("IsStartConnect", get_IsStartConnect, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameFramework_SocketTcp(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				GameFramework.SocketTcp obj = new GameFramework.SocketTcp(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameFramework.SocketTcp.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAddress(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetAddress(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
				obj.Connect();
				return 0;
			}
			else if (count == 3)
			{
				GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.Connect(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.SocketTcp.Connect");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearCachedData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
			obj.ClearCachedData();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReSendCachedData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
			obj.ReSendCachedData();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.Send(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Loop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
			obj.Loop();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsConnected(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
				bool o = obj.IsConnected();
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				bool o = obj.IsConnected(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameFramework.SocketTcp.IsConnected");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReConnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
			obj.ReConnect();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseAndInitTcp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
			obj.CloseAndInitTcp();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)ToLua.CheckObject<GameFramework.SocketTcp>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)o;
			int ret = obj.Port;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Port on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Host(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)o;
			string ret = obj.Host;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Host on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)o;
			int ret = obj.ServerType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ServerType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ErrorMessage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)o;
			string ret = obj.ErrorMessage;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ErrorMessage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsStartConnect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.SocketTcp obj = (GameFramework.SocketTcp)o;
			bool ret = obj.IsStartConnect;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsStartConnect on a nil value");
		}
	}
}

